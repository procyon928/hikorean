<% } else if (question.questionType === 'single_choice' || question.questionType === 'multiple_choice') { %>
  <% question.options.forEach(function(option) { %>
      <div class="form-check my-3">
          <input type="<%= question.questionType === 'single_choice' ? 'radio' : 'checkbox' %>" 
          name="answers[<%= index %>][answer]" value="<%= option[lang] || option['ko'] %>"
          <% if (question.isRequired) { %> required <% } %>
          class="form-check-input" id="option-<%= index %>-<%= option[lang] || option['ko'] %>">
          <label class="form-check-label" for="option-<%= index %>-<%= option[lang] || option['ko'] %>"><%= option[lang] || option['ko'] %></label>
      </div>
  <% }); %>
  <% if (question.allowOther) { %>
      <div class="form-check mt-2">
          <input type="<%= question.questionType === 'single_choice' ? 'radio' : 'checkbox' %>" 
          name="answers[<%= index %>][answer]" value="기타 응답" 
          id="otherOption<%= index %>" 
          <% if (question.isRequired) { %> required <% } %>
          class="form-check-input">
          <input type="text" class="form-control mt-1" id="otherAnswer<%= index %>" name="answers[<%= index %>][otherAnswer]" placeholder="<%= texts.survey.otherAnswer[lang] %>" 
          oninput="document.getElementById('otherOption<%= index %>').checked = true;">
      </div>
  <% } %>
  <input type="hidden" name="answers[<%= index %>][questionId]" value="<%= question._id %>">

  // 응답 처리
router.post('/surveys/:id/respond', async (req, res) => {
  const { answers, startedAt, email, lang } = req.body;
  console.log('Answers received:', answers);
  const survey = await Survey.findById(req.params.id);

  // 응답 검증
  const formattedAnswers = []; // 빈 배열 생성
  let answerIndex = 0; // 실제 답변 인덱스
  
  for (let i = 0; i < survey.questions.length; i++) {
      const question = survey.questions[i];
  
      // info 문항은 처리하지 않음
      if (question.questionType === 'info') {
          continue; // info 문항은 건너뜀
      }
  
      const answerObj = answers[answerIndex] || {}; // answers[answerIndex]가 없을 경우 빈 객체로 초기화
  
      const answer = answerObj.answer || ""; // 응답이 없으면 빈 문자열로 처리
      const questionId = answerObj.questionId || question._id; // questionId 초기화
  
      // 필수 문항 체크
      if (question.isRequired && (!answer || answer.trim() === "")) {
          return res.status(400).send(`문항 ${i + 1}은 필수입니다.`);
      }
  
      // '기타' 응답 검증 추가
      let otherAnswer = answerObj.otherAnswer || "";
      if (question.allowOther && !answerObj.otherAnswer) {
          // '기타' 응답이 선택되지 않은 경우, otherAnswer를 비워서 전송
          otherAnswer = "";
      }

      // 기존 문항 유형에 대한 처리
      if (question.questionType === 'preference') {
          const selectedRanks = answerObj.answer || []; // 선택된 순위 정보를 가져옴
          formattedAnswers.push({
              questionId: questionId,
              answer: selectedRanks // 모든 선택지에 대한 순위 정보를 저장
          });
      } else {
          formattedAnswers.push({
              questionId: questionId,
              answer: answer, // 항상 빈 값이거나 실제 응답이 들어가게 됩니다.
              otherAnswer: otherAnswer
          });
      }

      // 추가적인 검증 로직
      if (question.questionType === 'short_answer') {
          const inputType = question.inputType; // inputType 사용

          if (inputType === 'integer') {
              // 필수 문항이 아닐 경우, 응답이 없으면 검증을 생략
              if (question.isRequired || answer.trim() !== "") {
                  const minValue = parseInt(answerObj.minValue, 10); // 최소값 가져오기
                  const maxValue = parseInt(answerObj.maxValue, 10); // 최대값 가져오기

                  // 정수 입력 유효성 검사
                  const answerValue = parseInt(answer, 10);
                  if (!Number.isInteger(answerValue) || answerValue < minValue || answerValue > maxValue) {
                      return res.status(400).send(`문항 ${i + 1}의 입력값은 ${minValue}와 ${maxValue} 사이의 정수여야 합니다.`);
                  }
              }
          } else if (inputType === 'letters') {
              // 영문자 입력 유효성 검사
              if (/[^a-zA-Z\s]/.test(answer)) {
                  return res.status(400).send(`문항 ${i + 1}의 입력값은 영문자만 가능합니다.`);
              }
          }
          // 'all'일 경우 검증을 생략합니다.
      }
      answerIndex++;
  }

  // 응답 객체 생성
  const userId = req.user ? req.user._id : new mongoose.Types.ObjectId(); // 로그인한 경우 userId 설정, 비회원일 경우 임시 ObjectId 생성
  const response = new Response({
      surveyId: req.params.id,
      userId: userId, // userId에 회원 ID 또는 임시 ObjectId 설정
      answers: formattedAnswers, // 포맷팅된 answers 사용
      startedAt: new Date(startedAt),
      submittedAt: new Date(),
      email,
      lang
  });
  await response.save();
    
  // 결과 페이지로 리다이렉트
  res.redirect(`/surveys/${req.params.id}/confirm?lang=${lang}`);
});