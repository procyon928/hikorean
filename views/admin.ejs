<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>관리자 페이지</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.2.0/css/adminlte.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
</head>
<body class="hold-transition sidebar-mini">
    <div class="wrapper">
        <!-- 헤더 포함 -->
        <%- include('partials/header') %>

        <!-- 사이드바 포함 -->
        <%- include('partials/sidebar') %>

        <!-- Content Wrapper -->
        <div class="content-wrapper">
            <h1>회원 목록</h1>
            <table id="userTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>아이디</th>
                        <th>이메일</th>
                        <th>등급</th>
                        <th>가입일</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 사용자 목록이 여기에 추가됩니다 -->
                </tbody>
            </table>
            <button class="btn btn-primary" id="saveButton">저장</button>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/admin-lte/3.2.0/js/adminlte.min.js"></script>
    <script>
        let rolesMap = {};
        let userRoles = {}; // 변경된 역할을 저장할 객체

        async function checkAdminAccess() {
            try {
                const response = await fetch('/admin');
                if (response.status === 403) {
                    alert("접근 권한이 없습니다.");
                    window.location.href = '/';
                } else if (response.ok) {
                    await fetchRoles();
                    fetchUsers();
                } else {
                    alert('서버와의 통신 중 오류가 발생했습니다.');
                }
            } catch (error) {
                console.error('오류 발생:', error);
                alert('서버와의 통신 중 오류가 발생했습니다.');
            }
        }

        async function fetchRoles() {
            const response = await fetch('/admin/roles', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('token')
                }
            });

            if (!response.ok) {
                console.error('역할 목록을 가져오는 데 실패했습니다.');
                return;
            }

            rolesMap = await response.json();
        }

        async function fetchUsers() {
            const response = await fetch('/admin/users', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + localStorage.getItem('token')
                }
            });

            if (!response.ok) {
                alert('사용자 목록을 가져오는 데 실패했습니다.');
                return;
            }

            const users = await response.json();
            const tbody = document.querySelector('#userTable tbody');
            tbody.innerHTML = '';

            users.forEach(user => {
                const row = document.createElement('tr');
                const userRole = rolesMap[user.role] || user.role;
                const userCreatedAt = new Date(user.createdAt).toLocaleDateString();
                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td>
                        <select onchange="updateUserRole('${user._id}', this.value, '${user.role}')">
                        </select>
                    </td>
                    <td>${userCreatedAt}</td>
                `;
                tbody.appendChild(row);
                fetchRolesForSelect(row.querySelector('select'), user.role);
            });
        }

        async function fetchRolesForSelect(selectElement, currentRole) {
            for (const [key, value] of Object.entries(rolesMap)) {
                const option = document.createElement('option');
                option.value = key;
                option.textContent = value;
                selectElement.appendChild(option);
            }
            selectElement.value = currentRole;
        }

        function updateUserRole(userId, newRole, currentRole) {
            // 최고관리자의 등급 변경 여부 확인
            if (currentRole === 'superadmin' && newRole !== 'superadmin') {
                const confirmChange = confirm('최고관리자의 등급을 바꾸겠습니까?');
                if (!confirmChange) {
                    // '아니오'를 선택한 경우, 기존 등급으로 복원
                    const selectElement = document.querySelector(`select[onchange*="${userId}"]`);
                    selectElement.value = currentRole; // 기존 등급으로 복원
                    return; // 함수 종료
                }
            }
            userRoles[userId] = newRole; // 선택된 역할을 저장
        }

        async function saveRoles() {
            const promises = Object.entries(userRoles).map(async ([userId, newRole]) => {
                const response = await fetch(`/admin/users/${userId}/role`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.getItem('token')
                    },
                    body: JSON.stringify({ role: newRole })
                });
                if (!response.ok) {
                    throw new Error(`역할 변경 중 오류가 발생했습니다. 사용자 ID: ${userId}`);
                }
            });

            try {
                await Promise.all(promises);
                alert('모든 역할이 성공적으로 변경되었습니다.');
                fetchUsers(); // 사용자 목록 갱신
            } catch (error) {
                alert(error.message);
            }
        }

        document.getElementById('saveButton').addEventListener('click', saveRoles);

        window.onload = checkAdminAccess;
    </script>
</body>
</html>
